name: CI / Lint / Test / Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYGLET_HEADLESS: 'true'
  SDL_VIDEODRIVER: dummy
  PYTHONUNBUFFERED: '1'
  FORCE_COLOR: '1'

jobs:
  lint_and_test:
    name: Lint and Test (Linux, Py3.11)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml', 'setup.cfg', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install base tooling
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install flake8 pytest pytest-cov

      - name: Install project (editable if possible)
        shell: bash
        run: |
          set -e
          if [ -f pyproject.toml ] || [ -f setup.py ]; then
            python -m pip install -e . || python -m pip install .
          elif [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          fi

      - name: Flake8 Lint
        run: flake8 .

      - name: Run tests
        env:
          HEADLESS: '1'
        run: pytest -q --maxfail=1 --disable-warnings

  build:
    name: Build binaries (tagged) [${{ matrix.os }}]
    needs: lint_and_test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: [ '3.11' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'pyproject.toml', 'setup.cfg', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install pyinstaller build

      - name: Install project
        run: |
          if [ -f pyproject.toml ] || [ -f setup.py ]; then
            python -m pip install .
          elif [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          fi
        shell: bash

      - name: Build binary with PyInstaller (auto-detect)
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          python tools/ci/build_binary.py --name "AmorMortuorum" --out dist/release

      - name: Upload workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ runner.os }}
          path: dist/release/*
          if-no-files-found: error

      - name: Upload assets to GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
